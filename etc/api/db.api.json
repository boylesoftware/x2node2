{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.3.6",
    "schemaVersion": 1003,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "canonicalReference": "@x2node/db!",
  "docComment": "/**\n * SQL database operations module for <i>X2 Framework</i>.\n *\n * @packageDocumentation\n */\n",
  "name": "@x2node/db",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@x2node/db!",
      "name": "",
      "members": [
        {
          "kind": "Class",
          "canonicalReference": "@x2node/db!Database:class",
          "docComment": "/**\n * Database.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class "
            },
            {
              "kind": "Reference",
              "text": "Database"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Database",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@x2node/db!Database:constructor(1)",
              "docComment": "/**\n * Create new database object.\n *\n * @param opts - Database options.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor("
                },
                {
                  "kind": "Reference",
                  "text": "opts"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "DatabaseOptions"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "opts",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "@x2node/db!Database#shape:member",
              "docComment": "/**\n * The database shape.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "shape"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "DatabaseShape"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "shape",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@x2node/db!DatabaseConnection:interface",
          "docComment": "/**\n * Database connection.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "DatabaseConnection"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "DatabaseConnection",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@x2node/db!DatabaseConnection#beginTransaction:member(1)",
              "docComment": "/**\n * Begin database transaction.\n *\n * @remarks\n *\n * Throws an error if there is already an active transaction associated with this connection (considered a programming error).\n *\n * Once transaction is started, it must be ended using {@link DatabaseConnection.endTransaction} method before the connection is released.\n *\n * This method may not be called if there is already an active transaction associated with the connection. An error is thrown if attempted (considered a programming error).\n *\n * @param mode - Transaction mode.\n *\n * @returns Promise that resolves when transaction is successfully started and rejects if was unable to start transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "beginTransaction"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "mode"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "TxMode"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mode",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "beginTransaction"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@x2node/db!DatabaseConnection#endTransaction:member(1)",
              "docComment": "/**\n * End database transaction.\n *\n * @remarks\n *\n * If `resolve` is {@link TxResolve.Commit}, throws an error if there is no active transaction associated with this connection (considered a programming error). Rollback is the same, but is allowed to be performed after an unsuccessful commit.\n *\n * Once <em>successfully</em> ended, a new transaction can be started on the same connection, or the connenction can be released.\n *\n * Connection can be released after a rollback even if it was unsuccessful. Normally, if transaction rollback was unsuccessful, releasing the connection destroys it (even if connection pool is utilized).\n *\n * @param res - Transaction resolution.\n *\n * @returns Promise that resolves when transaction is successfully ended and rejects if there was an error attempting to end the transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "endTransaction"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "res"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "TxResolve"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "res",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "endTransaction"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@x2node/db!DatabaseConnection#executeQuery:member(1)",
              "docComment": "/**\n * Execute query (`SELECT` statement) on the connection.\n *\n * @remarks\n *\n * Not allowed when there is an unresolved promise returned by one of the transaction methods (in other words when the connection is in transitional transaction status).\n *\n * @param sql - Query SQL.\n *\n * @param parser - Query result parser.\n *\n * @typeParam R - Type of the query result object.\n *\n * @returns Promise of the query result. The promise is rejected if there was an error.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "executeQuery"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "R"
                },
                {
                  "kind": "Content",
                  "text": ">("
                },
                {
                  "kind": "Reference",
                  "text": "sql"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "parser"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "QueryResultParser"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "R"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "R"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 15,
                "endIndex": 19
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "sql",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 7
                  }
                },
                {
                  "parameterName": "parser",
                  "parameterTypeTokenRange": {
                    "startIndex": 10,
                    "endIndex": 14
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "R",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "executeQuery"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@x2node/db!DatabaseConnection#executeStatement:member(1)",
              "docComment": "/**\n * Execute statement on the connection.\n *\n * @remarks\n *\n * Not allowed when there is an unresolved promise returned by one of the transaction methods (in other words when the connection is in transitional transaction status).\n *\n * @param sql - Statement SQL.\n *\n * @returns Promise of the statement execution result. The promise is rejected if there was an error.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "executeStatement"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "sql"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "StatementResult"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "sql",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "executeStatement"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@x2node/db!DatabaseConnection#inTransaction:member",
              "docComment": "/**\n * Tells if the connection is in active transaction.\n *\n * @remarks\n *\n * This flag is `true` after the promise returned by {@link DatabaseConnection.beginTransaction} resolves and until {@link DatabaseConnection.endTransaction} is called.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "inTransaction"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "inTransaction",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@x2node/db!DatabaseConnection#release:member(1)",
              "docComment": "/**\n * Release connection back to the connection provider.\n *\n * @remarks\n *\n * The connection object is no longer usable after this method call.\n *\n * If there is an active transaction associated with the connection (see {@link DatabaseConnection.beginTransaction} method), the connection cannot be released until the transaction is ended. This method throws an error and the application crashes (considered a programming error) if attempted.\n *\n * Note to implementors: throwing an error from this method normally leads to the application crash.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "release"
                },
                {
                  "kind": "Content",
                  "text": "(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "release"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@x2node/db!DatabaseConnection#sessionId:member",
              "docComment": "/**\n * Underlynig database connection (session) id.\n *\n * @remarks\n *\n * This value may help identify a particular connection when a connection pool is involved, or identify the corresponding session on the database server side.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "sessionId"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "sessionId",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@x2node/db!DatabaseConnectionProvider:interface",
          "docComment": "/**\n * Database connection provider (such as a connection pool, for example).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "DatabaseConnectionProvider"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Service"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "DatabaseConnectionProvider",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@x2node/db!DatabaseConnectionProvider#dialect:member",
              "docComment": "/**\n * SQL dialect used by the database.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "dialect"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "SQLDialect"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "dialect",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@x2node/db!DatabaseConnectionProvider#getConnection:member(1)",
              "docComment": "/**\n * Allocate new database connection.\n *\n * @remarks\n *\n * After the connection is no longer needed it must be released via its {@link DatabaseConnection.release} method.\n *\n * @returns Promise of the active database connection. The promise is rejected if the connection cannot be established.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "getConnection"
                },
                {
                  "kind": "Content",
                  "text": "(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "DatabaseConnection"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getConnection"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@x2node/db!DatabaseMonitor:interface",
          "docComment": "/**\n * Database monitor service.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "DatabaseMonitor"
            },
            {
              "kind": "Content",
              "text": " extends "
            },
            {
              "kind": "Reference",
              "text": "Service"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "DatabaseMonitor",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@x2node/db!DatabaseMonitor#monitorTransaction:member(1)",
              "docComment": "/**\n * Allocate monitor for the transaction currently active on the provided database connection.\n *\n * @remarks\n *\n * Before the returned promise resolves, the monitor locks specified record collection segments. All locks are released upon completion of the transaction.\n *\n * The database connection passed to this method must be in active transaction (its {@link DatabaseConnection.inTransaction} flag must be `true`).\n *\n * @param con - Database connection.\n *\n * @param readSegments - Record collection segments that the transaction <em>may</em> read. These segments are locked with a shared lock.\n *\n * @param writeSegments - Record collection segments that the transaction <em>may</em> change. These segments are locked with an exclusive lock.\n *\n * @returns Promise of the transaction monitor. The promise is rejected if the monitor cannot be allocated.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "monitorTransaction"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "con"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "DatabaseConnection"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "readSegments"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "Segment"
                },
                {
                  "kind": "Content",
                  "text": "<unknown>[] | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": ", "
                },
                {
                  "kind": "Reference",
                  "text": "writeSegments"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "Segment"
                },
                {
                  "kind": "Content",
                  "text": "<unknown>[] | null | undefined"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "TransactionMonitor"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 18,
                "endIndex": 22
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "con",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                },
                {
                  "parameterName": "readSegments",
                  "parameterTypeTokenRange": {
                    "startIndex": 8,
                    "endIndex": 11
                  }
                },
                {
                  "parameterName": "writeSegments",
                  "parameterTypeTokenRange": {
                    "startIndex": 14,
                    "endIndex": 17
                  }
                }
              ],
              "name": "monitorTransaction"
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@x2node/db!DatabaseOptions:interface",
          "docComment": "/**\n * Options used to create database object.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "DatabaseOptions"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "DatabaseOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@x2node/db!DatabaseOptions#connectionProvider:member",
              "docComment": "/**\n * Database connection provider.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "connectionProvider"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "DatabaseConnectionProvider"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "connectionProvider",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@x2node/db!DatabaseOptions#monitor:member",
              "docComment": "/**\n * Database monitor provider.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "monitor"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "DatabaseMonitor"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "monitor",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@x2node/db!DatabaseOptions#recordTypes:member",
              "docComment": "/**\n * Record types stored in the database.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "recordTypes"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "RecordType"
                },
                {
                  "kind": "Content",
                  "text": "<unknown>[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "recordTypes",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@x2node/db!DatabaseShape:interface",
          "docComment": "/**\n * Descriptor of the data stored in the database.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "DatabaseShape"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "DatabaseShape",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "Variable",
          "canonicalReference": "@x2node/db!DB_CONNECTION_PROVIDER_SERVICE:var",
          "docComment": "/**\n * Standard service key for the database connection provider.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Reference",
              "text": "DB_CONNECTION_PROVIDER_SERVICE"
            },
            {
              "kind": "Content",
              "text": " = \"databaseConnectionProvider\""
            }
          ],
          "releaseTag": "Public",
          "name": "DB_CONNECTION_PROVIDER_SERVICE",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@x2node/db!DB_MONITOR_SERVICE:var",
          "docComment": "/**\n * Standard service key for the database monitor service.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Reference",
              "text": "DB_MONITOR_SERVICE"
            },
            {
              "kind": "Content",
              "text": " = \"databaseMonitor\""
            }
          ],
          "releaseTag": "Public",
          "name": "DB_MONITOR_SERVICE",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@x2node/db!LOG_CATEGORY:var",
          "docComment": "/**\n * Base debug log category for the database module.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Reference",
              "text": "LOG_CATEGORY"
            },
            {
              "kind": "Content",
              "text": " = \"X2_DB\""
            }
          ],
          "releaseTag": "Public",
          "name": "LOG_CATEGORY",
          "variableTypeTokenRange": {
            "startIndex": 0,
            "endIndex": 0
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "@x2node/db!QueryResultParser:interface",
          "docComment": "/**\n * SQL query (`SELECT` statement) result parser.\n *\n * @remarks\n *\n * A parser instance is passed into a query execution method and is fed with selected data row by row constructing the result object internally. Once the query execution is complete and all rows have been fed to the parser, the constructed query execution result object can be retrieved from the parser.\n *\n * Errors thrown from the parser methods cause the query execution result promise being rejected with the thrown error.\n *\n * @typeParam R - Type of the query result object constructed by the parser.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "QueryResultParser"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "R"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "QueryResultParser",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@x2node/db!QueryResultParser#addRow:member(1)",
              "docComment": "/**\n * Add result set row to the parser.\n *\n * @param row - The result set row.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "addRow"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "row"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "{\n        ["
                },
                {
                  "kind": "Reference",
                  "text": "field"
                },
                {
                  "kind": "Content",
                  "text": ": string]: unknown;\n    }"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "row",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 7
                  }
                }
              ],
              "name": "addRow"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@x2node/db!QueryResultParser#getResult:member(1)",
              "docComment": "/**\n * Get constructed query result object once all rows have been fed to the parser.\n *\n * @returns Query result object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "getResult"
                },
                {
                  "kind": "Content",
                  "text": "(): "
                },
                {
                  "kind": "Reference",
                  "text": "R"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "getResult"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@x2node/db!RecordShape:interface",
          "docComment": "/**\n * Descriptor of record type.\n *\n * @typeParam R - Record type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "RecordShape"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "R"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "RecordShape",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@x2node/db!RecordShape#segmentKeys:member",
              "docComment": "/**\n * Names of segment key fields.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "segmentKeys"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "readonly (keyof "
                },
                {
                  "kind": "Reference",
                  "text": "R"
                },
                {
                  "kind": "Content",
                  "text": ")[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "segmentKeys",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 6
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@x2node/db!RecordShape#type:member",
              "docComment": "/**\n * Record constructor.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "type"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "RecordType"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "R"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 7
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@x2node/db!RecordType:interface",
          "docComment": "/**\n * Class that represents a record type.\n *\n * @typeParam R - Record type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "RecordType"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "R"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "RecordType",
          "members": [
            {
              "kind": "ConstructSignature",
              "canonicalReference": "@x2node/db!RecordType:new(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "new (): "
                },
                {
                  "kind": "Reference",
                  "text": "R"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": []
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@x2node/db!Segment:interface",
          "docComment": "/**\n * Record collection segment descriptor.\n *\n * @typeParam R - Record type.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "Segment"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "R"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "Segment",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@x2node/db!Segment#keys:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "keys"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        ["
                },
                {
                  "kind": "Reference",
                  "text": "K"
                },
                {
                  "kind": "Content",
                  "text": " in keyof "
                },
                {
                  "kind": "Reference",
                  "text": "R"
                },
                {
                  "kind": "Content",
                  "text": "]?: "
                },
                {
                  "kind": "Reference",
                  "text": "R"
                },
                {
                  "kind": "Content",
                  "text": "["
                },
                {
                  "kind": "Reference",
                  "text": "K"
                },
                {
                  "kind": "Content",
                  "text": "];\n    }"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "keys",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 11
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@x2node/db!Segment#keys1:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "keys1"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "{\n        "
                },
                {
                  "kind": "Reference",
                  "text": "name"
                },
                {
                  "kind": "Content",
                  "text": ": keyof "
                },
                {
                  "kind": "Reference",
                  "text": "R"
                },
                {
                  "kind": "Content",
                  "text": ";\n        "
                },
                {
                  "kind": "Reference",
                  "text": "values"
                },
                {
                  "kind": "Content",
                  "text": "?: unknown[];\n    }[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "keys1",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 9
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@x2node/db!Segment#recordType:member",
              "docComment": "/**\n * Record type descriptor.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "recordType"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "RecordShape"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "R"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "recordType",
              "propertyTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 6
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@x2node/db!SQLDialect:interface",
          "docComment": "/**\n * SQL dialect.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "SQLDialect"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "SQLDialect",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@x2node/db!SQLDialect#booleanLiteral:member(1)",
              "docComment": "/**\n * Get SQL Boolean literal for the specified value.\n *\n * @param val - Boolean value.\n *\n * @returns SQL value expression that represents the provided Boolean value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "booleanLiteral"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "val"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "val",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "booleanLiteral"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@x2node/db!SQLDialect#stringLiteral:member(1)",
              "docComment": "/**\n * Get SQL string literal for the specified value.\n *\n * @param val - String value.\n *\n * @returns SQL value expression that represents the provided string value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "stringLiteral"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "val"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "val",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "stringLiteral"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "@x2node/db!StandardSQLDialect:class",
          "docComment": "/**\n * Standard SQL dialect implementation that can be used as a base class for more specific dialect imlementations.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class "
            },
            {
              "kind": "Reference",
              "text": "StandardSQLDialect"
            },
            {
              "kind": "Content",
              "text": " implements "
            },
            {
              "kind": "Reference",
              "text": "SQLDialect"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "StandardSQLDialect",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@x2node/db!StandardSQLDialect#booleanLiteral:member(1)",
              "docComment": "/**\n * Returns literals \"TRUE\" or \"FALSE\".\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "booleanLiteral"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "val"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "val",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "booleanLiteral"
            },
            {
              "kind": "Method",
              "canonicalReference": "@x2node/db!StandardSQLDialect#stringLiteral:member(1)",
              "docComment": "/**\n * Returns passed in string in single quotes and escapes all single quotes inside the string with a double single quote.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "stringLiteral"
                },
                {
                  "kind": "Content",
                  "text": "("
                },
                {
                  "kind": "Reference",
                  "text": "val"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "val",
                  "parameterTypeTokenRange": {
                    "startIndex": 4,
                    "endIndex": 5
                  }
                }
              ],
              "name": "stringLiteral"
            }
          ],
          "implementsTokenRanges": [
            {
              "startIndex": 3,
              "endIndex": 5
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "@x2node/db!StatementResult:interface",
          "docComment": "/**\n * Result of a SQL statement execution.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "StatementResult"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "StatementResult",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "@x2node/db!StatementResult#generatedId:member",
              "docComment": "/**\n * When inserting into a table with an auto-generated id column, this is the inserted id value.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "generatedId"
                },
                {
                  "kind": "Content",
                  "text": "?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "generatedId",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@x2node/db!StatementResult#numAffectedRows:member",
              "docComment": "/**\n * Number of table rows affected by the statement (e.g. inserted, updated or deleted).\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "numAffectedRows"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "numAffectedRows",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@x2node/db!TransactionMonitor:interface",
          "docComment": "/**\n * Monitor instance allocated to a specific transaction.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface "
            },
            {
              "kind": "Reference",
              "text": "TransactionMonitor"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TransactionMonitor",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "@x2node/db!TransactionMonitor#addSegmentUpdate:member(1)",
              "docComment": "/**\n * Register change being made to database records by the transaction.\n *\n * @param segment - Updated record collection segment. Must be exclusively locked.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "addSegmentUpdate"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "R"
                },
                {
                  "kind": "Content",
                  "text": ">("
                },
                {
                  "kind": "Reference",
                  "text": "segment"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Segment"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "R"
                },
                {
                  "kind": "Content",
                  "text": ">"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 11,
                "endIndex": 12
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "segment",
                  "parameterTypeTokenRange": {
                    "startIndex": 6,
                    "endIndex": 10
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "R",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "addSegmentUpdate"
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@x2node/db!TransactionMonitor#currentLastModified:member",
              "docComment": "/**\n * Most recent among the last modification timestamps of segments passed to {@link DatabaseMonitor.monitorTransaction} before the transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "currentLastModified"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Date"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "currentLastModified",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "@x2node/db!TransactionMonitor#currentVersion:member",
              "docComment": "/**\n * Computed aggregated version of the combination of segments passed to {@link DatabaseMonitor.monitorTransaction} before the transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly "
                },
                {
                  "kind": "Reference",
                  "text": "currentVersion"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "currentVersion",
              "propertyTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "@x2node/db!TransactionMonitor#saveSegmentUpdates:member(1)",
              "docComment": "/**\n * Save changes made to the database records by the transaction.\n *\n * @remarks\n *\n * This method is called before the database transaction is committed. The transaction can still be rolled back after this method call (if the transaction commit fails).\n *\n * @returns Promise of the new version information. If the promise rejects, the transaction is rolled back.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "saveSegmentUpdates"
                },
                {
                  "kind": "Content",
                  "text": "(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise"
                },
                {
                  "kind": "Content",
                  "text": "<{\n        readonly "
                },
                {
                  "kind": "Reference",
                  "text": "newVersion"
                },
                {
                  "kind": "Content",
                  "text": ": number;\n        readonly "
                },
                {
                  "kind": "Reference",
                  "text": "newLastModified"
                },
                {
                  "kind": "Content",
                  "text": ": "
                },
                {
                  "kind": "Reference",
                  "text": "Date"
                },
                {
                  "kind": "Content",
                  "text": ";\n    }>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 2,
                "endIndex": 10
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "saveSegmentUpdates"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Enum",
          "canonicalReference": "@x2node/db!TxMode:enum",
          "docComment": "/**\n * Transaction mode.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum "
            },
            {
              "kind": "Reference",
              "text": "TxMode"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TxMode",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@x2node/db!TxMode.ReadOnly:member",
              "docComment": "/**\n * Read-only transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "ReadOnly"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "ReadOnly",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@x2node/db!TxMode.ReadWrite:member",
              "docComment": "/**\n * Read/write transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "ReadWrite"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "ReadWrite",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ]
        },
        {
          "kind": "Enum",
          "canonicalReference": "@x2node/db!TxResolve:enum",
          "docComment": "/**\n * Transaction resolution.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare enum "
            },
            {
              "kind": "Reference",
              "text": "TxResolve"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TxResolve",
          "members": [
            {
              "kind": "EnumMember",
              "canonicalReference": "@x2node/db!TxResolve.Commit:member",
              "docComment": "/**\n * Commit transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Commit"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "0"
                }
              ],
              "releaseTag": "Public",
              "name": "Commit",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            },
            {
              "kind": "EnumMember",
              "canonicalReference": "@x2node/db!TxResolve.Rollback:member",
              "docComment": "/**\n * Rollback transaction.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Reference",
                  "text": "Rollback"
                },
                {
                  "kind": "Content",
                  "text": " = "
                },
                {
                  "kind": "Content",
                  "text": "1"
                }
              ],
              "releaseTag": "Public",
              "name": "Rollback",
              "initializerTokenRange": {
                "startIndex": 2,
                "endIndex": 3
              }
            }
          ]
        }
      ]
    }
  ]
}
